blueprint:
  name: Smart Thermostat
  description: A blueprint for managing heating
  domain: automation
  input:
    weather:
      name: Weather
      description: The weather application which you currently use
      selector:
        entity:
          domain: weather
    temp_sensor:
      name: Temperature Sensor
      description: Sensor(s) for measuring the house temperature
      selector:
        entity:
          domain: sensor
          device_class: temperature
    window_sensor:
      name: Window sensor
      description: Sensor checking if the window is open
      selector:
        entity:
          domain: binary_sensor
    daytime:
      name: Daytime
      description: Input the starting time for the day
      selector:
        time:
    nighttime:
      name: Nighttime
      description: Input the starting time for the night
      selector:
        time:
    thermostat:
      name: AC Device
      description: The cooling device
      selector:
        entity:
          domain: fan
    wintermode:
      name: Summer Temperature
      description: The ouside temperature needs to be above this to activate cooling (Default = 25°C)
      default: 25
      selector:
        number:
          step: 0.5
          min: 18
          max: 35
          unit_of_measurement: "°C"
    wintermode_delay:
      name: Wintermode Delay
      description: Time the outside temperature needs to stay below summer temperature to turn the AC off.
      default: 30
      selector:
        number:
          mode: box
          min: 1
          max: 86400
          unit_of_measurement: minutes
    

mode: queued
max_exceeded: silent
max: 10


trigger:
  - platform: state
    entity_id: !input thermostat
    from: 'off'
    to: 'on'
  - platform: state
    entity_id: 
      - !input temp_sensor
      - !input window_sensor
  - platform: numeric_state
    entity_id: !input weather
    attribute: temperature
    below: !input wintermode
    for: !input wintermode_delay
  - platform: numeric_state
    entity_id: !input weather
    attribute: temperature
    above: !input wintermode
    for: !input wintermode_delay
  - platform: time
    at: !input daytime
  - platform: time
    at: !input nighttime

action:
  - choose:
    - conditions:
      - condition: and
        conditions:
        - condition: template
          value_template: >
            {% set t = strptime(states('sensor.time'), "%H:%M:%S") %}
            {% set day = strptime(state_attr(daytime, 'time'), "%H:%M:%S") %}
            {% set night = strptime(state_attr(nighttime, 'time'), "%H:%M:%S") %}
            {{ day <= t < night}}        
        - condition: state
          entity_id: !input window_sensor
          state: 'off'
        - condition: numeric_state
          entity_id: !input weather
          attribute: temperature
          above: !input wintermode
      sequence:
        - service: fan.set_percentage
          target:
            entity_id: !input thermostat
          data:
            percentage: 50            
    - conditions:
      - condition: and
        conditions:
        - condition: template
          value_template: >
            {% set t = strptime(states('sensor.time'), "%H:%M:%S") %}
            {% set day = strptime(state_attr(daytime, 'time'), "%H:%M:%S") %}
            {% set night = strptime(state_attr(nighttime, 'time'), "%H:%M:%S") %}
            {{ day <= t < night}}        
        - condition: or
          conditions:
            - condition: state
              entity_id: !input window_sensor
              state: 'on'
            - condition: numeric_state
              entity_id: !input weather
              attribute: temperature
              below: !input wintermode
      sequence:
        - service: homeassistant.turn_off 
          entity_id: !input thermostat
    - conditions:
          - condition: and
            conditions:
              - condition: template
                value_template: >
                  {% set t = strptime(states('sensor.time'), "%H:%M:%S") %}
                  {% set day = strptime(state_attr(daytime, 'time'), "%H:%M:%S") %}
                  {% set night = strptime(state_attr(nighttime, 'time'), "%H:%M:%S") %}
                  {{ night <= t < day}}        
              - condition: state
                entity_id: !input window_sensor
                state: 'off'
              - condition: numeric_state
                entity_id: !input weather
                attribute: temperature
                above: !input wintermode
      sequence:
        - service: fan.set_percentage
          target:
            entity_id: !input thermostat
          data:
            percentage: 10
    - conditions:
      - condition: and
        conditions:
        - condition: template
          value_template: >
            {% set t = strptime(states('sensor.time'), "%H:%M:%S") %}
            {% set day = strptime(state_attr(daytime, 'time'), "%H:%M:%S") %}
            {% set night = strptime(state_attr(nighttime, 'time'), "%H:%M:%S") %}
            {{ night <= t < day}}        
        - condition: or
          conditions:
            - condition: state
              entity_id: !input window_sensor
              state: 'on'
            - condition: numeric_state
              entity_id: !input weather
              attribute: temperature
              below: !input wintermode
      sequence:
         - service: homeassistant.turn_off 
           entity_id: !input thermostat
    default:
      
            
    
