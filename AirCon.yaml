blueprint:
  name: AC Control
  description: A blueprint for managing cooling
  domain: automation
  input:
    weather:
      name: Weather
      description: The weather application which you currently use
      selector:
        entity:
          domain: weather
    temp_sensor:
      name: Temperature Sensor
      description: Sensor(s) for measuring the house temperature
      selector:
        entity:
          domain: sensor
          device_class: temperature
    window_sensor:
      name: Window sensor
      description: Sensor checking if the window is open
      selector:
        entity:
          domain: binary_sensor
    daytime:
      name: Daytime
      description: Input the starting time for the day
      selector:
        time:
    nighttime:
      name: Nighttime
      description: Input the starting time for the night
      selector:
        time:
    thermostat:
      name: AC Device
      description: The cooling device
      selector:
        entity:
          domain: fan
    wintermode:
      name: Summer Temperature
      description: The ouside temperature needs to be above this to activate cooling (Default = 25°C)
      default: 25
      selector:
        number:
          step: 0.5
          min: 18
          max: 35
          unit_of_measurement: "°C"
    wintermode_delay:
      name: Wintermode Delay
      description: Time the outside temperature needs to stay below summer temperature to turn the AC off.
      default: 30
      selector:
        number:
          mode: box
          min: 1
          max: 86400
          unit_of_measurement: minutes
    

mode: queued
max_exceeded: silent
max: 10


trigger:
  - platform: state
    entity_id: !input thermostat
    from: 'off'
    to: 'on'
  - platform: state
    entity_id: 
      - !input temp_sensor
      - !input window_sensor
  - platform: numeric_state
    entity_id: !input weather
    attribute: temperature
    above: !input wintermode
    for: !input wintermode_delay
  - platform: numeric_state
    entity_id: !input temp_sensor
    attribute: temperature
    above: !input wintermode
    for: !input wintermode_delay
  - platform: time
    at: !input daytime
  - platform: time
    at: !input nighttime

action:
  - choose:
    - conditions:
      - condition: time
              after: input_datetime.nighttime
              before: input_datetime.daytime
      sequence:
        - service: fan.set_percentage
          target:
            entity_id: !input thermostat
          data:
            percentage: 33
    - conditions:
      - condition: and
        conditions:
        - condition: state
          entity_id: !input window_sensor
          state: 'off'
        - condition: or
          conditions:
          - condition: numeric_state
            entity_id: !input temp_sensor
            attribute: temperature
            above: !input wintermode
          - condition: numeric_state
            entity_id: !input weather
            attribute: temperature
            above: !input wintermode
      sequence:
        - service: fan.set_percentage
          target:
            entity_id: !input thermostat
          data:
            percentage: 100           
    - conditions:    
        - condition: or
          conditions:
            - condition: state
              entity_id: !input window_sensor
              state: 'on'
            - condition: numeric_state
              entity_id: !input weather
              attribute: temperature
              below: !input wintermode
            - condition: numeric_state
              entity_id: !input weather
              attribute: temperature
              above: !input wintermode         
      sequence:
        - service: fan.set_percentage
          target:
            entity_id: !input thermostat
          data:
            percentage: 33
    default: []
      
            
    
